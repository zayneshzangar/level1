package main

import (
	"fmt"
	"math/rand"
	"time"
)

// генерация канала из последовательности чисел
func asChan(vs ...int) <-chan int {
	c := make(chan int)
	go func() {
		for _, v := range vs {
			c <- v
			time.Sleep(time.Duration(rand.Intn(1000)) * time.Millisecond)
		}
		close(c)
	}()
	return c
}

// объединение двух входящих каналов в один
func merge(a, b <-chan int) <-chan int {
	c := make(chan int)
	go func() {
		for {
			select {
			case v, ok := <-a:
				if ok {
					c <- v
				} else {
					a = nil
				}
			case v, ok := <-b:
				if ok {
					c <- v
				} else {
					b = nil
				}
			}
			if a == nil && b == nil {
				close(c)
				return
			}
		}
	}()
	return c
}

func main() {
	rand.Seed(time.Now().UnixNano())
	a := asChan(1, 3, 5, 7)
	b := asChan(2, 4, 6, 8)
	c := merge(a, b)

	for v := range c {
		fmt.Print(v, " ")
	}
	fmt.Println()
}


/*
Вывод (пример):
1 2 4 6 3 8 5 7

Разбор работы программы:

1. Функция asChan:
   - Принимает список чисел и возвращает канал.
   - Внутри запускается горутина, которая поочерёдно отправляет числа в канал.
   - Между отправками делается случайная задержка (rand.Intn(1000) мс).
   - После отправки всех чисел канал закрывается.

2. В main:
   - Создаются два канала a и b вызовом asChan с разными последовательностями.
   - Таким образом запускаются две горутины, каждая пишет свои числа в канал.

3. Функция merge:
   - Принимает два входных канала и возвращает один общий.
   - Запускается горутина, внутри которой работает бесконечный цикл с select:
     • select читает данные либо из a, либо из b (в зависимости от того, какой готов).
     • Полученные значения сразу пересылаются в выходной канал c.
     • Когда один из каналов закрывается, ему присваивается nil, чтобы select больше его не слушал.
     • Когда оба канала равны nil, выходной канал закрывается и горутина завершается.

4. В main чтение из объединённого канала c выводит все значения в порядке,
   который зависит от случайных задержек в asChan. Поэтому результат каждый раз разный.

Итог:
Программа демонстрирует работу с каналами, горутинами и оператором select —
два независимых потока данных объединяются в один канал и обрабатываются параллельно.
*/
