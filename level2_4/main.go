package main

func main() {
	ch := make(chan int)
	go func() {
		for i := 0; i < 10; i++ {
			ch <- i
		}
	}()
	for n := range ch {
		println(n)
	}
}


/*
ВЫВОД
0
1
2
3
4
5
6
7
8
9
fatal error: all goroutines are asleep - deadlock!

goroutine 1 [chan receive]:
main.main()
	/home/zangar/Documents/projects/github/zayneshzangar/technoschool/level1/level2_4/main.go:10 +0xa8
exit status 2

Причина:
Программа завершается с ошибкой deadlock из-за того, что канал ch 
не был закрыт после завершения отправки данных в горутине. 
Горутина отправляет числа от 0 до 9 в небуферизированный канал ch, 
и главный горутина успешно принимает эти значения с помощью for range, 
выводя их на экран. Однако после отправки последнего значения (9) 
горутина завершает работу, но не вызывает close(ch), что сигнализирует 
о завершении отправки. В результате главный горутина, продолжая читать 
из канала в цикле for n := range ch, блокируется, ожидая новых данных. 
Поскольку нет других горутин, отправляющих значения, и канал остаётся 
открытым, программа заходит в тупик (deadlock). Рантайм Go фиксирует 
это состояние и прерывает выполнение с сообщением об ошибке.

Что не хватало в моём описании:
- Указание, что канал небуферизированный, что усиливает блокировку.
- Подробное объяснение, почему for range продолжает ждать (ожидание закрытия канала).
- Уточнение, что отсутствие close(ch) — ключевой фактор, приводящий к deadlock.

*/
