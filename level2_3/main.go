package main

import (
	"fmt"
	"os"
)

func Foo() error {
	var err *os.PathError = nil
	return err
}

func main() {
	err := Foo()
	fmt.Println(err)
	fmt.Println(err == nil)
}


/*
Вывод
<nil>
false

Интерфейс в Go — это структура из двух поле: указателя 
на таблицу методов (тип) и указателя на данные (значение). 
Если тип не nil, интерфейс не nil, даже если значение nil.

В данном случае err — это интерфейс с типом *os.PathError 
и значением nil, что отличает его от чистого nil

Сравнение err == nil проверяет, является ли сам интерфейс 
полностью nil (оба поле — тип и значение — равны nil)

Поскольку err содержит тип *os.PathError и значение nil, 
он не считается nil, и результат сравнения — false



Отличие интерфейсов от пустых интерфейсов
1. Интерфейс с методами (например, error):
  * Определяет конкретный набор методов (например, Error() string).
  * Ограничивает типы, которые могут быть использованы (только те, что реализуют указанные методы).
  * Интерфейс с методами обеспечивает типобезопасность и контракт поведения.

2. Пустой интерфейс (interface{}):
  * Не содержит методов, может принимать любой тип.
  * Используется как универсальный контейнер, но требует явного приведения типа (type assertion) для доступа к данным.
  * Внутренне структура одинакова (тип + значение), но таблица методов у пустого интерфейса пуста.
*/